if (!EOL) { var EOL = {}; }

var _TOOLTIP_OPEN = false;

EOL.max_meta_rows = 10;

// Allows us to remember which tab we're on:
EOL.push_tab_state = function(tab_link) {
  EOL.change_tab_state(tab_link, 'push');
};

// Allows us to remember which tab we're on:
EOL.replace_tab_state = function(tab_link) {
  EOL.change_tab_state(tab_link, 'replace');
};

EOL.change_tab_state = function(tab_link, type) {
  if ($('#content .data ul.subtabs').length > 0) {
    // Only allow this on pages with data tabs:
    if (typeof history.pushState !== "undefined") {
      // Sadly, just pulling the class(es) from the parent node doesn't work; it can have several. We might add IDs to the links
      // later, though, to make this cleaner.
      var pclass = {};
      if (tab_link.parent().hasClass('glossary')) {
        pclass = 'glossary';
      } else if (tab_link.parent().hasClass('about')) {
        pclass = 'about';
      } else {
        pclass = 'all'; // a kind of "default"... it will check toc first, anyway.
      }
      if (type == 'replace') {
        history.replaceState({ pclass: pclass, toc: tab_link.data('toc-id') }, null, tab_link.attr('href'));
      } else {
        history.pushState({ pclass: pclass, toc: tab_link.data('toc-id') }, null, tab_link.attr('href'));
      }
    }
  }
};

EOL.switch_subtab = function(which, options) {
  $('.about_subtab').hide();
  $('.glossary_subtab').hide();
  $('.ranges_subtab').hide();
  if (which.parent().hasClass('about') || which.parent().hasClass('glossary') || which.parent().hasClass('ranges')) {
    EOL.hide_data_tables($('table.data'));
    $('#taxon_data .empty').hide();
    $('.glossary_subtab').hide();
    $('.help_text').hide();
    $('.filters').hide();
    if (which.parent().hasClass('about')) {
      $('.about_subtab').show();
    } else if (which.parent().hasClass('glossary')) {
      $('.glossary_subtab').show();
      $('.glossary_subtab .help_text').show();
    }
    else if (which.parent().hasClass('ranges')) {
      $('.ranges_subtab').show();
      $('.ranges_subtab .help_text').show();
    }
  } else if (which.parent().hasClass('all')) { // Acts as a reset button/link
    $('.filters').show();
    $('#taxon_data .empty').show();
    $('#taxon_data > .help_text').show();
    EOL.show_data_tables($('table.data'));
  } else {
    $('.filters').show();
    EOL.hide_data_tables($('table.data'));
    EOL.show_data_tables($('table.data[data-toc-id="' + which.data('toc-id') + '"]'));
    $('#taxon_data > .help_text').show();
  }
  which.parent().parent().find('li').removeClass('active');
  which.parent().addClass('active');
  // Reset other aspects of the table:
  $('table.data tr.open').removeClass('open');
  $('table.data .fold img').attr('src', '<%= asset_path "arrow_fold_right.png" %>');
  $('table.meta').hide();
  EOL.limit_data_rows();
  // if ( ! options || ! options['skip_push']) EOL.push_tab_state(which);
};

EOL.create_info_dialog = function(match) {
  var $has_id = $(match).closest('[id]');
  var nearest = $has_id.attr('id'); // We need to remember which one is open; click again and it closes.
  $(match).parent().children('.info_icon').remove(); // We will replace this with a definition...
  $(match)
    .attr('id', "info_"+nearest)
    .before('<a id="tip_'+nearest+'" class="info_icon def" data-info="'+nearest+'">&emsp;</a>') // Spaces 'cause width doesn't work. :\
    .addClass('tip')
    .prepend('<a href="#" class="close">&nbsp;</a>');
  EOL.enable_info_dialogs($('#tip_'+nearest));
  EOL.enable_data_tab_glossary_links($(match));
  $(match).appendTo(document.body);
};

EOL.enable_data_tab_glossary_links = function(info) {
  // want to enable this on the data tab, so check for some element that only exists there
  if(info.closest('#taxon_data.main_container').length > 0) {
    info.find('a.glossary').each(function() {
      $(this).text($(this).data('tab_link_message'));
    });
    info.find('a.glossary').on('click', function(e) {
      e.preventDefault();
      var link_clicked = $(this);
      link_clicked.closest('.info').hide();
      $('#tabs_sidebar li.glossary a').trigger('click');
      setTimeout(function() {
        $('html,body').animate({ scrollTop: $("#" + link_clicked.data('anchor')).offset().top }, 500);
      }, 100);
    });
  }
};

EOL.enable_info_dialogs = function(tip) {
  tip.unbind('click')
    .on('click', function() {
      $('.site_column').unbind('click');
      var $link = $(this);
      var $info = $('#info_'+$(this).data('info'));
      if ($info.is(':visible')) {
        $info.hide('fast');
      } else {
        $('.info.tip').hide('fast');
        var pos = $(this).offset();
        $info.css({ top: pos.top + $(this).height() + 26, left: pos.left + $(this).width() });
        $info.show('fast',
          function() {
            $('.site_column').on('click', function() { $('.info').hide('fast'); $('.site_column').unbind('click'); });
          }
        ).find('a.close').on('click', function() { $('.info').hide('fast'); return(false); } );
      }
    });
  // making sure the info icons show when anywhere on the row is moused over
  $('table.data tr.data, table.meta tr').hover(
    function() {
      $(this).find('.info_icon.def').addClass('active');
    },
    function() {
      $(this).find('.info_icon').removeClass('active');
    }
  );
};

EOL.enable_button = function($button) {
  if ($button.is(':disabled')) {
    $button.removeAttr('disabled').fadeTo(225, 1);
  }
};

EOL.disable_button = function($button) {
  if (!$button.is(':disabled')) {
    $button.attr("disabled", true).fadeTo(225, 0.3);
  }
};

EOL.attribute_is_not_okay = function() {
  $('input.predicate_autocomplete').addClass('problems');
  $('#new_uri_warning').show();
  EOL.disable_measurement_input();
};

EOL.attribute_is_okay = function() {
  $('input.predicate_autocomplete').removeClass('problems');
  $('#new_uri_warning').hide();
  if ($('#predicate_uri_type').val() == 'measurement' && $('.predicate_autocomplete').val() !== '') {
    $('fieldset.unit_of_measure').fadeIn(100);
  } else {
    EOL.disable_measurement_input();
  }
};

EOL.disable_measurement_input = function() {
  $('fieldset.unit_of_measure').fadeOut(100);
  $('fieldset.unit_of_measure input').val('');
};

EOL.hide_data_tables = function(tables) {
  tables.hide();
  tables.prev('div.header_underlined').hide();
};

EOL.show_data_tables = function(tables) {
  tables.show();
  tables.prev('div.header_underlined').show();
  tables.find('tr.data').show();
  tables.find('tr.actions').hide();
  $('#curation_legend.help_text').show();
};

EOL.toggle_actions_row = function(data_row) {
  var $folder = data_row.find('.fold img');
  var $next_row = data_row.next();
  var $next_row_data = $next_row.children('td');
  var $table = data_row.next().find('table.meta');
  $folder.parent().attr({
    title: '<%= I18n.t(:data_row_additional_detail_assistive_js) %>'
  });
  if ($next_row.is(":visible")) {
    $folder.attr({
      src: '<%= asset_path "arrow_fold_right.png" %>',
      alt: '<%= I18n.t(:data_row_additional_detail_show_alt) %>'
    });
    $next_row.hide();
    $table.hide();
  } else {
    var data_point_id = data_row.attr('id');
    // the metadata table hasn't been loaded yet, so load it dynamically
    if (data_row.data('loading') !== true && data_row.data('loaded') !== true) {
      $folder.attr({
        src: '<%= asset_path "indicator_arrows_black.gif" %>',
        alt: '<%= I18n.t(:data_row_additional_detail_loading_alt) %>'
      });
      data_row.data('loading', true);
      $.ajax({
        url: '/data_point_uris/' + data_point_id.replace('data_point_', '') + '/show_metadata',
        dataType: 'html',
        success: function(response) {
          var $pasted = $next_row_data.prepend(response);
          $pasted.find('.info').each(function() {
            var html = $(this).find('ul.glossary > li')[0].outerHTML;
            var uri = $(this).find('.uri').text();
            EOL.create_info_dialog(this);
            // only add the term if it is not already in the glossary
            $('.glossary_subtab ul.glossary:not(:contains("' + uri + '"))').append(html);
          });
          // sort the glossary now that new items have been added to the end
          $(".glossary_subtab ul.glossary > li").sort(EOL.sort_glossary).appendTo('.glossary_subtab ul.glossary');
          EOL.enable_hover_list_items();
        },
        error: function(xhr, stat, err) { $next_row.html('<p>Sorry, there was an error: '+stat+'</p>'); },
        complete: function() {
          $folder.attr({
            src: '<%= asset_path "arrow_fold_down.png" %>',
            alt: '<%= I18n.t(:data_row_additional_detail_hide_alt) %>'
          });
          $next_row.show();
          EOL.yank_glossary_terms($next_row);
          $table.show();
          data_row.data('loading', false);
          data_row.data('loaded', true);
          $folder.attr('src', '<%= asset_path "arrow_fold_down.png" %>');
        }
      });
    } else if(data_row.data('loading') !== true)
    {
      $folder.attr({
        src: '<%= asset_path "arrow_fold_down.png" %>',
        alt: '<%= I18n.t(:data_row_additional_detail_hide_alt) %>'
      });
      $next_row.show();
      $table.show();
    }
  }
};

EOL.sort_glossary = function(a, b) {
  return ($(b).find('dt').text()) < ($(a).find('dt').text()) ? 1 : -1;
};

EOL.enable_suggestions_hover = function() {
  $('input.predicate_autocomplete').parent().hover(function() {
    if (!$('ul.ui-autocomplete').is(':visible') && $('input.predicate_autocomplete').val() === '') {
      $('div#suggestions').show();
    } else $('div#suggestions').hide();
  }, function () {
    $('div#suggestions').hide();
  });
};

EOL.disable_suggestions_hover = function() {
  $('input.predicate_autocomplete').parent().unbind('hover');
};

EOL.update_input_id_and_name = function(form, new_id) {
  form.find('input').each(function() {
    $(this).attr('id', $(this).attr('id').replace(/\d+/, new_id));
    $(this).attr('name', $(this).attr('name').replace(/\d+/, new_id));
    // these 3 fields are used in autocompleting of metadata
    if ($(this).data('id-element')) {
      $(this).data('id-element', $(this).data('id-element').replace(/\d+/, new_id));
    }
    if ($(this).data('include-predicate_known_uri_id')) {
      $(this).data('include-predicate_known_uri_id', $(this).data('include-predicate_known_uri_id').replace(/\d+/, new_id));
    }
    // Using attr instead of data here because data treats the value as JSON and we want it as a string:
    if ($(this).attr('data-update-elements')) {
      $(this).attr('data-update-elements', $(this).attr('data-update-elements').replace(/\d+/, new_id));
    }
  });
};

EOL.limit_data_rows = function() {
  $('table.data tr.more').remove();
  $('table.data tr.data.first_of_type:visible').each(function() {
    var type = $(this).data('type');
    var $nested_set = $(this).closest('table').find('tr[data-type="' + type + '"]:visible');
    if ($nested_set.length > EOL.max_meta_rows) {
      var $index = 1;
      $nested_set.each(function() { if ($index > EOL.max_meta_rows) $(this).hide(); $index++; });
      $nested_set.filter(':last').after(
        '<tr data-type="' + type + '" class="data nested more"><th></th><td><a href="#" class="more">' +
        $('table.data').data('more').replace('NNN', ($nested_set.length-EOL.max_meta_rows)) +
        '</a></td><td></td><td></td></tr>');
      $('tr.more a.more').unbind('click').on('click', function() {
        var $parent_row = $(this).closest('tr');
        $('tr.data[data-type="' + $parent_row.data('type') +'"]').show();
        $parent_row.remove();
        return(false);
      });
    }
  });
};

EOL.yank_glossary_terms = function($row) {
};

EOL.enable_hover_list_items = function() {
  $('ul.glossary li').hover(
    function() {
      $(this).find('li.hover').show();
    }, function() {
      $(this).find('li.hover').hide();
    }
  );
};

// change the list of units based on the currently selected attribute
EOL.update_unit_select_options = function(known_uri_id) {
  // call the 'autocomplete' method with the given predicate ID (or no predicate ID to get back all units)
  $.ajax({
    url: '/known_uris/autocomplete_known_uri_units?predicate_known_uri_id=' + known_uri_id,
    dataType: 'json',
    success: function(response) {
      // remove all but the first option, which is not specified
      $('select#unit').find('option:gt(0)').remove();
      $.each(response, function(key, unit_data) {
        // add back the units applicable to the selected attribute
        $('select#unit').append($('<option></option>').attr("value", unit_data.uri).text(unit_data.value));
      });
    }
  });
};

$(function() {

  $('.has_many').each(function() {
    var $subform = $(this).clone();
    $subform.find('.once').remove();
    var last_input = $(this).closest('form').find('input[id^=user_added_data_user_added_data_metadata_attributes]').filter(':last');
    var highest_field_id = parseInt(last_input.attr('id').match(/(\d+)/)[1]);
    EOL.update_input_id_and_name($subform, highest_field_id += 1);
    $subform.appendTo($(this)).addClass('subform').hide();
    $(this).append('<span class="add"><a href="#">'+$(this).data('another')+'</a></span>');
    $(this).find('.add a').on('click', function() {
      $subform.clone().insertBefore($(this).parent()).show();
      EOL.update_input_id_and_name($subform, highest_field_id += 1);
      var form_h = $('.has_many_expandable').height();
      $('.has_many_expandable').height(form_h + $subform.height());
      return(false);
    });
  });

  $('div#suggestions').appendTo($('input.predicate_autocomplete').parent());

  $('input.predicate_autocomplete').keyup(function(e) {
    var key = e.keyCode || e.which;
    // it was the return key that was pressed, likely the user
    // choosing an autocomplete value from the list, so do nothing
    if (key === 13) return;
    var $field = $(this);
    if ($field.val() !== '') {
      $('div#suggestions').hide();
    }
    if ($('input.predicate_known_uri_id').val() !== '') {
      $('input.predicate_known_uri_id').val('');
      EOL.attribute_is_not_okay();
    }
    if ($field.val() === '' || $('input.predicate_known_uri_id').val() !== '') {
      EOL.attribute_is_okay();
    } else EOL.attribute_is_not_okay();
  }).focus(function() {
    if ($(this).val() === '') {
      $('div#suggestions').show();
    }
  });

  EOL.enable_suggestions_hover();

  $('fieldset.unit_of_measure').hide();

  $('table.data .fold a').on('click', function() { $(this).closest('tr').click(); return(false); }); // These links just click the row, with JS.

  $('table.data tr.actions').hide().prev().find('.fold img').attr('src', '<%= asset_path "arrow_fold_right.png" %>');

  $('table.data tr.data').on('click',
    function(e) {
      var $targ;
      if (e.target) $targ = $(e.target);
      else if (e.srcElement) $targ = $(e.srcElement);
      // Grab the TR if they clicked on something lower. Seems odd that this happens, but it does (it's usually a TD).
      if (! $targ.is("tr")) $targ = $targ.closest('tr');
      // Abort if the row is hidden (and in a data search table; it's fine if it's on a data tab):
      if ($targ.hasClass('hidden') && $targ.closest('table.search').length > 0) return;
      // Abort if it's a legitimate link (which will handle itself):
      if ($targ.closest('a').length) return;
      EOL.toggle_actions_row($targ);
    });

  $('table.data tr.actions td .metadata').live('click',
    function(e) {
      if ($(e.target).closest('a').length) return; // It's a link, don't handle the row...
      EOL.toggle_actions_row($(this).closest('tr').prev());
    });

  $('#recently_used_category a').on('click', function() {
    $('#suggestions').find('.child').hide();
    var $next = $(this).parent().next();
    while($next.hasClass('child')) {
      $next.show();
      $next = $next.next();
    }
    return(false);
  });

  $('li.attribute').live('click', function() {
    var span = $(this).find('.name');
    $('input.predicate_autocomplete').val(span.text());
    $('input.predicate_known_uri_id').val(span.data('id'));
    $('#predicate_uri_type').val(span.data('uri_type'));
    $('#user_added_data_has_values').val(span.data('has_values'));
    EOL.attribute_is_okay();
    $('div#suggestions').hide();
  });

  // any chosen autocomplete value is legitimate
  $('input.predicate_autocomplete').bind('railsAutocomplete.select', function(event, data){
    EOL.attribute_is_okay();
  });

  $('input[data-autocomplete]').live('focus', function() {
    // if the field is a value autocomplete, check the hidden *_has_values
    // field to see if we should disable autocomplete or not
    if ($(this).data('autocomplete').match(/known_uri_values/)) {
      var value_toggle = $(this).closest('div').find('input[id*="has_values"]:first');
      if (value_toggle.length > 0) {
        if (value_toggle.val() === '1') $(this).autocomplete('enable');
        else $(this).autocomplete('disable');
      }
    }

    // for the primary measurement, always autocomplete with the value in the text input. The other
    // autocomplete fields will search on ' ' to show always show the pick-list on focus. The primary
    // measurment field will show the custom selector when the field is empty
    if ($(this).hasClass('predicate_autocomplete')) {
      $(this).autocomplete("search", $(this).val());
    } else $(this).autocomplete("search", ' ');
  });

  // this helps show default pick-lists when the fields are empty
  $('input[data-autocomplete]').keyup(function(e) {
    var key = e.keyCode || e.which;
    // do nothing if it the key pressed was an arrow key, that would interfere with autocomplete selection
    if (key === 37 || key === 38 || key === 39 || key === 40) return;
    if ($(this).val() === '') {
      if ($(this).hasClass('predicate_autocomplete')) {
        $('div#suggestions').show();
      } else $(this).autocomplete("search", ' ');
    }
  });

  $('#tabs_sidebar.data ul.subtabs a').on('click', function() {
    EOL.switch_subtab($(this));
    return(false);
  });

  EOL.limit_data_rows();

  if (location.hash !== "") {
    var name  = location.hash.replace(/\?.*$/, '');
    var $row = $(name);
    $row.click();
    if ($row.offset() !== undefined) {
      var new_top = $row.offset().top - 200;
      $("html, body").animate({ scrollTop: new_top });
    }
  }

  // Remove links on the overview should be hidden until you hover:
  $('#data_summary table').hover(function() {
    $('span.remove').show();
  }, function () {
    $('span.remove').hide();
  }).find('span.remove').hide();

  $('a.button.hidden').hide();

  $('#sortable').sortable({
    placeholder: "placeholder", items: "tr:not(.headers)", helper: 'clone', tolerance: 'pointer',
    update: function(e, ui) {
      $.post("/known_uris/sort", { known_uris: $("#sortable").sortable('toArray'), moved_id: ui.item.attr('id') });
    }
  }).disableSelection();

  $('#sortable a.to_top').on('click', function() {
    $.post("/known_uris/sort", { to: 'top', moved_id: $(this).closest('tr').attr('id') });
    return(false);
  });

  $('#sortable a.to_bottom').on('click', function() {
    $.post("/known_uris/sort", { to: 'bottom', moved_id: $(this).closest('tr').attr('id') });
    return(false);
  });

  // Definitions of Attributes are dialogs if JS is enabled:
  $('table.data tr .info, table.data.search tr .info').each(function() {
    EOL.create_info_dialog(this);
  });

  $('.add_content .article').hide();
  $('.add_content .add_data a').on('click', function() {
    var $article = $('.add_content .article');
    if ($article.is(':visible')) {
      $(this).removeClass('open');
      $('.add_content .article').hide();
    } else {
      $(this).addClass('open');
      $('.add_content .article').show();
    }
    return(false);
  });

  EOL.enable_hover_list_items();

  $('.page_actions .data_download a').on('click', function() {
    window.alert($(this).parent().data('alert').replace(/<\/?[^>]+>/g, ''));
  });

  $('#known_uris.glossary ul.chapters li').find('a, input').on('click', function(e) {
    e.preventDefault();
    var li = $(this).closest('li');
    var checkbox = li.find('input');
    var chapters = $('#known_uris.glossary ul.chapters');
    if(li.hasClass('selected')) {
      li.removeClass('selected');
      // for some reason the setTimeout is needed when the checkbox is the one clicked
      setTimeout(function() { checkbox.prop('checked', false); }, 5);
      if(chapters.find('li.selected').length === 0) $('ul.glossary > li').show();
      else {
        // using the attributeContainsWord selector ~= here
        $('ul.glossary li[data-toc-id~="' + li.data('toc-id') + '"]').hide();
      }
    } else
    {
      if(chapters.find('li.selected').length === 0) $('ul.glossary > li').hide();
      li.addClass('selected');
      setTimeout(function() { checkbox.prop('checked', true); }, 5);
      // using the attributeContainsWord selector ~= here
      $('ul.glossary li[data-toc-id~="' + li.data('toc-id') + '"]').show();
    }
    return false;
  });

  // change the list of units based on the currently selected attribute
  $('#data_search select#attribute').on('change', function() {
    EOL.update_unit_select_options($(this).find(":selected").data('known_uri_id'));
  });

  window.onpopstate = function(e) {
    if (e.state === null) return;
    var old_tab;
    if (e.state.toc === undefined) old_tab = $('#tabs_sidebar.data li.'+e.state.pclass+' a');
    else old_tab = $('#tabs_sidebar.data ul a[data-toc-id='+e.state.toc+']');
    EOL.switch_subtab(old_tab, {skip_push: true});
  };

  if (typeof history.pushState !== "undefined") {
    var active_tab = $('#tabs_sidebar.data ul .active a');
    if(active_tab !== undefined && active_tab.length > 0) EOL.replace_tab_state(active_tab);
  }

});
